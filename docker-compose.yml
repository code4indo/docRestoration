services:
  # GAN-HTR Training Service (Production)
  gan-htr-prod:
    image: jatnikonm/gan-htr:latest
    container_name: gan-htr-prod
    restart: unless-stopped
    volumes:
      # Include docRestoration directory (training code + scripts)
      - .:/workspace/docRestoration
      # Training outputs (persistent)
      - ./outputs:/workspace/outputs
      - ./logbook:/workspace/logbook
      # HuggingFace cache (persistent untuk avoid re-download)
      - huggingface_cache:/root/.cache/huggingface
      - poetry_cache:/root/.cache/poetry
      # Data volumes (akan di-download dari HuggingFace)
      - gan_data:/workspace/dual_modal_gan/data
      - htr_models:/workspace/models
      - charlist_data:/workspace/real_data_preparation
      # MLflow runs (persistent)
      - ./mlruns:/workspace/mlruns
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - PYTHONUNBUFFERED=1
      - HF_HUB_ENABLE_HF_TRANSFER=1
      - HF_USERNAME=jatnikonm
      - HF_REPO_NAME=HTR_VOC
      - MODE=production
      - TRAINING_SCRIPT=${TRAINING_SCRIPT:-scripts/train32_production.sh}
    ports:
      - "5001:5000/tcp"
      - "6007:6006/tcp"
      - "8889:8888/tcp"
    tty: true
    stdin_open: true
    # Entrypoint for production mode (auto-download data)
    entrypoint: ["/workspace/docRestoration/entrypoint.sh"]
    working_dir: /workspace/docRestoration
    # Command akan di-override oleh entrypoint berdasarkan TRAINING_SCRIPT env
    networks:
      - gan-htr-network

  # Smoke Test Service (Quick 2-epoch validation)
  gan-htr-smoke-test:
    image: jatnikonm/gan-htr:latest
    container_name: gan-htr-smoke-test
    restart: "no"
    volumes:
      - .:/workspace/docRestoration
      - ./outputs:/workspace/outputs
      - ./logbook:/workspace/logbook
      - gan_data:/workspace/dual_modal_gan/data
      - htr_models:/workspace/models
      - charlist_data:/workspace/real_data_preparation
      - huggingface_cache:/root/.cache/huggingface
      - poetry_cache:/root/.cache/poetry
      - ./mlruns:/workspace/mlruns
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - PYTHONUNBUFFERED=1
      - HF_USERNAME=jatnikonm
      - HF_REPO_NAME=HTR_VOC
      - MODE=smoke_test
      - TRAINING_SCRIPT=scripts/train32_smoke_test.sh
    entrypoint: ["/workspace/docRestoration/entrypoint.sh"]
    working_dir: /workspace/docRestoration
    networks:
      - gan-htr-network

  # Test container (validation only - no training)
  gan-htr-test:
    image: jatnikonm/gan-htr:latest
    container_name: gan-htr-test
    volumes:
      - .:/workspace/docRestoration
      - ./logbook:/workspace/logbook
      - huggingface_cache:/root/.cache/huggingface
      - poetry_cache:/root/.cache/poetry
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - PYTHONUNBUFFERED=1
      - TEST_MODE=true
      - MODE=test
    command: >
      bash -c "echo '🧪 Test container started' && python3 -c 'import tensorflow as tf; print(\"✅ TensorFlow found:\", tf.__version__); print(\"✅ GPU:\", len(tf.config.list_physical_devices(\"GPU\"))); print(\"✅ GPU acceleration available\" if tf.config.list_physical_devices(\"GPU\") else \"⚠️ GPU not detected or not working\")' && echo '✅ Test passed - Container ready!'"
    networks:
      - gan-htr-network

  # Development override (optional)
  gan-htr-dev:
    image: jatnikonm/gan-htr:latest
    container_name: gan-htr-dev
    entrypoint: ["/workspace/docRestoration/entrypoint.sh"]
    volumes:
      - .:/workspace/docRestoration
      - ./outputs:/workspace/outputs
      - ./logbook:/workspace/logbook
      - gan_data:/workspace/dual_modal_gan/data
      - htr_models:/workspace/models
      - charlist_data:/workspace/real_data_preparation
      - huggingface_cache:/root/.cache/huggingface
      - poetry_cache:/root/.cache/poetry
      - ./mlruns:/workspace/mlruns
    environment:
      - DEVELOPMENT_MODE=true
      - DEBUG=true
      - HF_USERNAME=jatnikonm
      - HF_REPO_NAME=HTR_VOC
      - MODE=development
    command: >
      bash -c "echo '🔧 Development mode activated' && /workspace/docRestoration/entrypoint.sh poetry shell"
    networks:
      - gan-htr-network

# Volume definitions
volumes:
  huggingface_cache:
    driver: local
  poetry_cache:
    driver: local
  mlruns:
    driver: local
  # Data volumes (downloaded from HuggingFace)
  gan_data:
    driver: local
  htr_models:
    driver: local
  charlist_data:
    driver: local

# Network for cross-container communication
networks:
  gan-htr-network:
    driver: bridge
